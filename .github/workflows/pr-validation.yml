name: PR Validation

on:
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-structure:
    runs-on: ubuntu-latest
    name: Validate Container Structure
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - run: npm ci

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: "containers/**"

      - name: Validate container structure
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          npm run validate

      - name: Check for required files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Check each changed container directory has required files
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            container_dir=$(dirname "$file")
            if [[ "$container_dir" == containers/* ]]; then
              container_slug=$(basename "$container_dir")
              echo "Checking container: $container_slug"
              
              # Check required files exist
              required_files=("Dockerfile" "entrypoint.sh" "meta.json" "README.md")
              for req_file in "${required_files[@]}"; do
                if [[ ! -f "$container_dir/$req_file" ]]; then
                  echo "❌ Missing required file: $container_dir/$req_file"
                  exit 1
                fi
              done
              
              # Check entrypoint.sh is executable
              if [[ ! -x "$container_dir/entrypoint.sh" ]]; then
                echo "❌ entrypoint.sh is not executable in $container_dir"
                exit 1
              fi
              
              echo "✅ Container $container_slug structure is valid"
            fi
          done

  validate-metadata:
    runs-on: ubuntu-latest
    name: Validate Container Metadata
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - run: npm ci

      - name: Get changed containers
        id: changed-containers
        uses: tj-actions/changed-files@v45
        with:
          files: "containers/**/meta.json"

      - name: Validate meta.json files
        if: steps.changed-containers.outputs.any_changed == 'true'
        run: |
          for meta_file in ${{ steps.changed-containers.outputs.all_changed_files }}; do
            echo "Validating $meta_file"
            
            # Check JSON syntax
            if ! jq empty "$meta_file" 2>/dev/null; then
              echo "❌ Invalid JSON in $meta_file"
              exit 1
            fi
            
            # Check required fields
            required_fields=("name" "tagline" "tags" "architectures" "primaryHw")
            for field in "${required_fields[@]}"; do
              if ! jq -e ".$field" "$meta_file" >/dev/null; then
                echo "❌ Missing required field '$field' in $meta_file"
                exit 1
              fi
            done
            
            # Validate architectures
            if ! jq -e '.architectures | type == "array" and length > 0' "$meta_file" >/dev/null; then
              echo "❌ architectures must be a non-empty array in $meta_file"
              exit 1
            fi
            
            # Validate tags
            if ! jq -e '.tags | type == "array" and length > 0' "$meta_file" >/dev/null; then
              echo "❌ tags must be a non-empty array in $meta_file"
              exit 1
            fi
            
            echo "✅ $meta_file is valid"
          done

  test-build:
    runs-on: ubuntu-latest
    name: Test Container Builds
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64]  # Only test amd64 in CI for speed
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Get changed containers
        id: changed-containers
        uses: tj-actions/changed-files@v45
        with:
          files: "containers/**"
          dir_names: true
          dir_names_max_depth: 2

      - name: Test build changed containers
        if: steps.changed-containers.outputs.any_changed == 'true'
        run: |
          for container_dir in ${{ steps.changed-containers.outputs.all_changed_files }}; do
            if [[ "$container_dir" == containers/* ]] && [[ -f "$container_dir/Dockerfile" ]]; then
              container_slug=$(basename "$container_dir")
              echo "Testing build for: $container_slug"
              
              # Check if this architecture is supported
              if jq -e '.architectures | index("amd64")' "$container_dir/meta.json" >/dev/null; then
                echo "Building $container_slug for amd64..."
                docker buildx build \
                  --platform linux/amd64 \
                  --tag "test/$container_slug:pr" \
                  "$container_dir" || {
                  echo "❌ Build failed for $container_slug"
                  exit 1
                }
                echo "✅ Build successful for $container_slug"
              else
                echo "⏭️ Skipping $container_slug (amd64 not supported)"
              fi
            fi
          done

  lint-dockerfile:
    runs-on: ubuntu-latest
    name: Lint Dockerfiles
    steps:
      - uses: actions/checkout@v4

      - name: Get changed Dockerfiles
        id: changed-dockerfiles
        uses: tj-actions/changed-files@v45
        with:
          files: "containers/**/Dockerfile"

      - name: Lint Dockerfiles
        if: steps.changed-dockerfiles.outputs.any_changed == 'true'
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ steps.changed-dockerfiles.outputs.all_changed_files }}
          failure-threshold: warning

  check-documentation:
    runs-on: ubuntu-latest
    name: Check Documentation
    steps:
      - uses: actions/checkout@v4

      - name: Get changed containers
        id: changed-containers
        uses: tj-actions/changed-files@v45
        with:
          files: "containers/**"
          dir_names: true
          dir_names_max_depth: 2

      - name: Check README files
        if: steps.changed-containers.outputs.any_changed == 'true'
        run: |
          for container_dir in ${{ steps.changed-containers.outputs.all_changed_files }}; do
            if [[ "$container_dir" == containers/* ]] && [[ -f "$container_dir/meta.json" ]]; then
              readme_file="$container_dir/README.md"
              if [[ -f "$readme_file" ]]; then
                # Check README has minimum required sections
                if ! grep -q "^#" "$readme_file"; then
                  echo "❌ README.md should have at least one heading in $container_dir"
                  exit 1
                fi
                echo "✅ README.md exists and has content in $container_dir"
              else
                echo "❌ Missing README.md in $container_dir"
                exit 1
              fi
            fi
          done

  summary:
    runs-on: ubuntu-latest
    name: Validation Summary
    needs: [validate-structure, validate-metadata, test-build, lint-dockerfile, check-documentation]
    if: always()
    steps:
      - name: Check all validations passed
        run: |
          if [[ "${{ needs.validate-structure.result }}" != "success" ]] || \
             [[ "${{ needs.validate-metadata.result }}" != "success" ]] || \
             [[ "${{ needs.test-build.result }}" != "success" ]] || \
             [[ "${{ needs.lint-dockerfile.result }}" != "success" ]] || \
             [[ "${{ needs.check-documentation.result }}" != "success" ]]; then
            echo "❌ Some validation checks failed"
            exit 1
          fi
          echo "✅ All validation checks passed!"
