name: Build & Publish (main)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      build_all:
        description: "Build all containers (ignore changed-files)"
        required: false
        default: "false"
        type: choice
        options: ["false", "true"]

permissions:
  id-token: write
  contents: write
  packages: write
  pages: write

env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_PREFIX: sd-

jobs:
  plan-slugs:
    runs-on: ubuntu-latest
    outputs:
      slugs: ${{ steps.out.outputs.SLUGS }}
    steps:
      - uses: actions/checkout@v4
      - id: changed
        uses: tj-actions/changed-files@v45
        with: { files: "containers/**" }
      - id: out
        run: |
          ONLY_CHANGED=${{ github.event.inputs.build_all != 'true' && 'true' || 'false' }}
          echo "SLUGS=$(CHANGED_FILES='${{ steps.changed.outputs.all_changed_files }}' ONLY_CHANGED=$ONLY_CHANGED npm run -s list-slugs)" >> $GITHUB_OUTPUT

  build-publish:
    needs: plan-slugs
    if: ${{ fromJSON(needs.plan-slugs.outputs.slugs).length > 0 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        slug: ${{ fromJSON(needs.plan-slugs.outputs.slugs) }}
    steps:
      - uses: actions/checkout@v4

      - name: Read meta.json
        id: meta
        run: |
          meta="containers/${{ matrix.slug }}/meta.json"
          archs=$(jq -r '.architectures | join(",")' "$meta")
          platforms=$(jq -r '[.architectures[] | if .=="arm64" then "linux/arm64" else "linux/amd64" end] | join(",")' "$meta")
          name="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}${{ matrix.slug }}"
          title=$(jq -r '.name' "$meta")
          tagline=$(jq -r '.tagline' "$meta")
          tags=$(jq -r '.tags | join(",")' "$meta")
          primaryHw=$(jq -r '.primaryHw' "$meta")
          echo "ARCHS=$archs" >> $GITHUB_OUTPUT
          echo "PLATFORMS=$platforms" >> $GITHUB_OUTPUT
          echo "IMAGE=$name" >> $GITHUB_OUTPUT
          # Prepare OCI/SD labels
          {
            echo "org.opencontainers.image.title=$title"
            echo "org.opencontainers.image.description=$tagline"
            echo "org.opencontainers.image.source=https://github.com/${{ github.repository }}"
            echo "org.opencontainers.image.revision=${{ github.sha }}"
            echo "io.streamdeploy.slug=${{ matrix.slug }}"
            echo "io.streamdeploy.tags=$tags"
            echo "io.streamdeploy.primaryHw=$primaryHw"
          } > labels.txt

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: containers/${{ matrix.slug }}
          file: containers/${{ matrix.slug }}/Dockerfile
          platforms: ${{ steps.meta.outputs.PLATFORMS }}
          push: true
          tags: |
            ${{ steps.meta.outputs.IMAGE }}:latest
            ${{ steps.meta.outputs.IMAGE }}:sha-${{ github.sha }}
          labels: |
            ${{ steps.meta.outputs && '' }}
          sbom: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          # docker/build-push-action doesn't accept a file for labels; inline them:
          DOCKER_BUILD_SUMMARY: "false"
        # inject labels by setting "labels" input dynamically (we used a trick above);
        # GH Actions will concatenate lines provided there

      - name: Attach labels (fallback)
        if: always()
        run: |
          echo "(labels were provided via build step input; this is a no-op)"

  build-dist:
    needs: [build-publish]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { persist-credentials: true }
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - run: npm ci
      - name: Build marketplace + templates
        run: |
          GH_OWNER=${{ github.repository_owner }} REGISTRY=${{ env.REGISTRY }} IMAGE_PREFIX=${{ env.IMAGE_PREFIX }} GITHUB_SHA=${{ github.sha }} npm run build-dist
      - name: Commit dist + containers.json
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: containers.json dist/**
          commit_message: "chore: update marketplace + templates"
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy-pages:
    needs: build-dist
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
